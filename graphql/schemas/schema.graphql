type Circuit {
    id: Int
    name: String
    country: String
}

type Race {
    id: Int
    Circuit: Int
    year: Int
    winner: Int
    second_place: Int
    third_place: Int
}

type Driver {
    id: Int
    first_name: String
    last_name: String
#    date_of_birth: String
    date_of_birth: Date
    nationality: String
    current_team: Constructor
    presious_teams: [Constructor]
    race_wins: Int
    pole_positions: Int

}

scalar Date

type Constructor {
    id: Int
    name: String
    year_founded : Int
    country: String
    championship_wins: Int
    drivers: [Driver]
}

type Query {
    circuits(filter: CircuitFilter, sort: SortInput): [Circuit],
    races(filter: RaceFilter, sort: SortInput): [Race],
    drivers(filter: DriverFilter, sort: SortInput): [Driver],
    constructors(filter: ConstructorFilter, sort: SortInput): [Constructor]
}

input CircuitFilter {
    id: IntFilter
    name: StringFilter
    country: StringFilter
}

input RaceFilter {
    id: IntFilter
    year: IntFilter
    circuit: IntFilter
}

input DriverFilter {
    id: IntFilter
    nationality: StringFilter
    race_wins: IntFilter
}

input ConstructorFilter {
    id: IntFilter
    country: StringFilter
    championship_wins: IntFilter
}

input StringFilter {
    eq: String
    contains: String
    notContains: String
}

input IntFilter {
    eq: Int
    gt: Int
    lt: Int
    gte: Int
    lte: Int
}

input SortInput {
    field: String
    order: SortOrder
}

enum SortOrder {
    ASC
    DESC
}
